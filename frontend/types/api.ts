/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * RealWorld API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ConduitDomainArticle
 */
export interface ConduitDomainArticle {
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainArticle
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainArticle
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainArticle
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainArticle
     */
    body?: string;
    /**
     * 
     * @type {ConduitDomainPerson}
     * @memberof ConduitDomainArticle
     */
    author?: ConduitDomainPerson;
    /**
     * 
     * @type {Array<ConduitDomainComment>}
     * @memberof ConduitDomainArticle
     */
    comments?: Array<ConduitDomainComment>;
    /**
     * 
     * @type {boolean}
     * @memberof ConduitDomainArticle
     */
    favorited?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ConduitDomainArticle
     */
    favoritesCount?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConduitDomainArticle
     */
    tagList?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof ConduitDomainArticle
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ConduitDomainArticle
     */
    updatedAt?: Date;
}
/**
 * 
 * @export
 * @interface ConduitDomainComment
 */
export interface ConduitDomainComment {
    /**
     * 
     * @type {number}
     * @memberof ConduitDomainComment
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainComment
     */
    body?: string;
    /**
     * 
     * @type {ConduitDomainPerson}
     * @memberof ConduitDomainComment
     */
    author?: ConduitDomainPerson;
    /**
     * 
     * @type {Date}
     * @memberof ConduitDomainComment
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ConduitDomainComment
     */
    updatedAt?: Date;
}
/**
 * 
 * @export
 * @interface ConduitDomainPerson
 */
export interface ConduitDomainPerson {
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainPerson
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainPerson
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainPerson
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitDomainPerson
     */
    image?: string;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesArticlesArticleEnvelope
 */
export interface ConduitFeaturesArticlesArticleEnvelope {
    /**
     * 
     * @type {ConduitDomainArticle}
     * @memberof ConduitFeaturesArticlesArticleEnvelope
     */
    article?: ConduitDomainArticle;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesArticlesArticlesEnvelope
 */
export interface ConduitFeaturesArticlesArticlesEnvelope {
    /**
     * 
     * @type {Array<ConduitDomainArticle>}
     * @memberof ConduitFeaturesArticlesArticlesEnvelope
     */
    articles?: Array<ConduitDomainArticle>;
    /**
     * 
     * @type {number}
     * @memberof ConduitFeaturesArticlesArticlesEnvelope
     */
    articlesCount?: number;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesArticlesCreateArticleData
 */
export interface ConduitFeaturesArticlesCreateArticleData {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesArticlesCreateArticleData
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesArticlesCreateArticleData
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesArticlesCreateArticleData
     */
    body?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConduitFeaturesArticlesCreateArticleData
     */
    tagList?: Array<string>;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesArticlesCreateCommand
 */
export interface ConduitFeaturesArticlesCreateCommand {
    /**
     * 
     * @type {ConduitFeaturesArticlesCreateArticleData}
     * @memberof ConduitFeaturesArticlesCreateCommand
     */
    article?: ConduitFeaturesArticlesCreateArticleData;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesArticlesEditArticleData
 */
export interface ConduitFeaturesArticlesEditArticleData {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesArticlesEditArticleData
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesArticlesEditArticleData
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesArticlesEditArticleData
     */
    body?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConduitFeaturesArticlesEditArticleData
     */
    tagList?: Array<string>;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesArticlesEditModel
 */
export interface ConduitFeaturesArticlesEditModel {
    /**
     * 
     * @type {ConduitFeaturesArticlesEditArticleData}
     * @memberof ConduitFeaturesArticlesEditModel
     */
    article?: ConduitFeaturesArticlesEditArticleData;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesCommentsCommentEnvelope
 */
export interface ConduitFeaturesCommentsCommentEnvelope {
    /**
     * 
     * @type {ConduitDomainComment}
     * @memberof ConduitFeaturesCommentsCommentEnvelope
     */
    comment?: ConduitDomainComment;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesCommentsCommentsEnvelope
 */
export interface ConduitFeaturesCommentsCommentsEnvelope {
    /**
     * 
     * @type {Array<ConduitDomainComment>}
     * @memberof ConduitFeaturesCommentsCommentsEnvelope
     */
    comments?: Array<ConduitDomainComment>;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesCommentsCreateCommentData
 */
export interface ConduitFeaturesCommentsCreateCommentData {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesCommentsCreateCommentData
     */
    body?: string;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesCommentsCreateModel
 */
export interface ConduitFeaturesCommentsCreateModel {
    /**
     * 
     * @type {ConduitFeaturesCommentsCreateCommentData}
     * @memberof ConduitFeaturesCommentsCreateModel
     */
    comment?: ConduitFeaturesCommentsCreateCommentData;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesProfilesProfile
 */
export interface ConduitFeaturesProfilesProfile {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesProfilesProfile
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesProfilesProfile
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesProfilesProfile
     */
    image?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConduitFeaturesProfilesProfile
     */
    following?: boolean;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesProfilesProfileEnvelope
 */
export interface ConduitFeaturesProfilesProfileEnvelope {
    /**
     * 
     * @type {ConduitFeaturesProfilesProfile}
     * @memberof ConduitFeaturesProfilesProfileEnvelope
     */
    profile?: ConduitFeaturesProfilesProfile;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesTagsTagsEnvelope
 */
export interface ConduitFeaturesTagsTagsEnvelope {
    /**
     * 
     * @type {Array<string>}
     * @memberof ConduitFeaturesTagsTagsEnvelope
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersCreateCommand
 */
export interface ConduitFeaturesUsersCreateCommand {
    /**
     * 
     * @type {ConduitFeaturesUsersCreateUserData}
     * @memberof ConduitFeaturesUsersCreateCommand
     */
    user?: ConduitFeaturesUsersCreateUserData;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersCreateUserData
 */
export interface ConduitFeaturesUsersCreateUserData {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersCreateUserData
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersCreateUserData
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersCreateUserData
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersEditCommand
 */
export interface ConduitFeaturesUsersEditCommand {
    /**
     * 
     * @type {ConduitFeaturesUsersEditUserData}
     * @memberof ConduitFeaturesUsersEditCommand
     */
    user?: ConduitFeaturesUsersEditUserData;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersEditUserData
 */
export interface ConduitFeaturesUsersEditUserData {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersEditUserData
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersEditUserData
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersEditUserData
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersEditUserData
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersEditUserData
     */
    image?: string;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersLoginCommand
 */
export interface ConduitFeaturesUsersLoginCommand {
    /**
     * 
     * @type {ConduitFeaturesUsersLoginUserData}
     * @memberof ConduitFeaturesUsersLoginCommand
     */
    user?: ConduitFeaturesUsersLoginUserData;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersLoginUserData
 */
export interface ConduitFeaturesUsersLoginUserData {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersLoginUserData
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersLoginUserData
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersUser
 */
export interface ConduitFeaturesUsersUser {
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersUser
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersUser
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersUser
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersUser
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof ConduitFeaturesUsersUser
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface ConduitFeaturesUsersUserEnvelope
 */
export interface ConduitFeaturesUsersUserEnvelope {
    /**
     * 
     * @type {ConduitFeaturesUsersUser}
     * @memberof ConduitFeaturesUsersUserEnvelope
     */
    user?: ConduitFeaturesUsersUser;
}
/**
 * ArticlesApi - fetch parameter creator
 * @export
 */
export const ArticlesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [tag] 
         * @param {string} [author] 
         * @param {string} [favorited] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesFeedGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/articles/feed`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (favorited !== undefined) {
                localVarQueryParameter['favorited'] = favorited;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tag] 
         * @param {string} [author] 
         * @param {string} [favorited] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/articles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (favorited !== undefined) {
                localVarQueryParameter['favorited'] = favorited;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPost(options: any = {}): FetchArgs {
            const localVarPath = `/articles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsGet(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugCommentsGet.');
            }
            const localVarPath = `/articles/{slug}/comments`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsIdDelete(slug: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugCommentsIdDelete.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling articlesSlugCommentsIdDelete.');
            }
            const localVarPath = `/articles/{slug}/comments/{id}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsPost(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugCommentsPost.');
            }
            const localVarPath = `/articles/{slug}/comments`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugDelete(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugDelete.');
            }
            const localVarPath = `/articles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugFavoriteDelete(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugFavoriteDelete.');
            }
            const localVarPath = `/articles/{slug}/favorite`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugFavoritePost(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugFavoritePost.');
            }
            const localVarPath = `/articles/{slug}/favorite`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugGet(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugGet.');
            }
            const localVarPath = `/articles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugPut(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling articlesSlugPut.');
            }
            const localVarPath = `/articles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [tag] 
         * @param {string} [author] 
         * @param {string} [favorited] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesFeedGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesArticlesArticlesEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesFeedGet(tag, author, favorited, limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [tag] 
         * @param {string} [author] 
         * @param {string} [favorited] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesArticlesArticlesEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesGet(tag, author, favorited, limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesArticlesArticleEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsGet(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesCommentsCommentsEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugCommentsGet(slug, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsIdDelete(slug: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugCommentsIdDelete(slug, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsPost(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesCommentsCommentEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugCommentsPost(slug, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugDelete(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugDelete(slug, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugFavoriteDelete(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesArticlesArticleEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugFavoriteDelete(slug, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugFavoritePost(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesArticlesArticleEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugFavoritePost(slug, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugGet(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesArticlesArticleEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugGet(slug, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugPut(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesArticlesArticleEnvelope> {
            const localVarFetchArgs = ArticlesApiFetchParamCreator(configuration).articlesSlugPut(slug, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [tag] 
         * @param {string} [author] 
         * @param {string} [favorited] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesFeedGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any) {
            return ArticlesApiFp(configuration).articlesFeedGet(tag, author, favorited, limit, offset, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [tag] 
         * @param {string} [author] 
         * @param {string} [favorited] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any) {
            return ArticlesApiFp(configuration).articlesGet(tag, author, favorited, limit, offset, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPost(options?: any) {
            return ArticlesApiFp(configuration).articlesPost(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsGet(slug: string, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugCommentsGet(slug, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsIdDelete(slug: string, id: number, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugCommentsIdDelete(slug, id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugCommentsPost(slug: string, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugCommentsPost(slug, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugDelete(slug: string, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugDelete(slug, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugFavoriteDelete(slug: string, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugFavoriteDelete(slug, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugFavoritePost(slug: string, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugFavoritePost(slug, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugGet(slug: string, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugGet(slug, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesSlugPut(slug: string, options?: any) {
            return ArticlesApiFp(configuration).articlesSlugPut(slug, options)(fetch, basePath);
        },
    };
};

/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export class ArticlesApi extends BaseAPI {
    /**
     * 
     * @param {string} [tag] 
     * @param {string} [author] 
     * @param {string} [favorited] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesFeedGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any) {
        return ArticlesApiFp(this.configuration).articlesFeedGet(tag, author, favorited, limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [tag] 
     * @param {string} [author] 
     * @param {string} [favorited] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesGet(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any) {
        return ArticlesApiFp(this.configuration).articlesGet(tag, author, favorited, limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesPost(options?: any) {
        return ArticlesApiFp(this.configuration).articlesPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugCommentsGet(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugCommentsGet(slug, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugCommentsIdDelete(slug: string, id: number, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugCommentsIdDelete(slug, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugCommentsPost(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugCommentsPost(slug, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugDelete(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugDelete(slug, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugFavoriteDelete(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugFavoriteDelete(slug, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugFavoritePost(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugFavoritePost(slug, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugGet(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugGet(slug, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public articlesSlugPut(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).articlesSlugPut(slug, options)(this.fetch, this.basePath);
    }

}
/**
 * ProfilesApi - fetch parameter creator
 * @export
 */
export const ProfilesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameFollowDelete(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling profilesUsernameFollowDelete.');
            }
            const localVarPath = `/profiles/{username}/follow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameFollowPost(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling profilesUsernameFollowPost.');
            }
            const localVarPath = `/profiles/{username}/follow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameGet(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling profilesUsernameGet.');
            }
            const localVarPath = `/profiles/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameFollowDelete(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesProfilesProfileEnvelope> {
            const localVarFetchArgs = ProfilesApiFetchParamCreator(configuration).profilesUsernameFollowDelete(username, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameFollowPost(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesProfilesProfileEnvelope> {
            const localVarFetchArgs = ProfilesApiFetchParamCreator(configuration).profilesUsernameFollowPost(username, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameGet(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesProfilesProfileEnvelope> {
            const localVarFetchArgs = ProfilesApiFetchParamCreator(configuration).profilesUsernameGet(username, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameFollowDelete(username: string, options?: any) {
            return ProfilesApiFp(configuration).profilesUsernameFollowDelete(username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameFollowPost(username: string, options?: any) {
            return ProfilesApiFp(configuration).profilesUsernameFollowPost(username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUsernameGet(username: string, options?: any) {
            return ProfilesApiFp(configuration).profilesUsernameGet(username, options)(fetch, basePath);
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesUsernameFollowDelete(username: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesUsernameFollowDelete(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesUsernameFollowPost(username: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesUsernameFollowPost(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesUsernameGet(username: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesUsernameGet(username, options)(this.fetch, this.basePath);
    }

}
/**
 * TagsApi - fetch parameter creator
 * @export
 */
export const TagsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(options: any = {}): FetchArgs {
            const localVarPath = `/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesTagsTagsEnvelope> {
            const localVarFetchArgs = TagsApiFetchParamCreator(configuration).tagsGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(options?: any) {
            return TagsApiFp(configuration).tagsGet(options)(fetch, basePath);
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsGet(options?: any) {
        return TagsApiFp(this.configuration).tagsGet(options)(this.fetch, this.basePath);
    }

}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesUsersUserEnvelope> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesUsersUserEnvelope> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPut(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any) {
            return UserApiFp(configuration).userGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(options?: any) {
            return UserApiFp(configuration).userPut(options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGet(options?: any) {
        return UserApiFp(this.configuration).userGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userPut(options?: any) {
        return UserApiFp(this.configuration).userPut(options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost(options: any = {}): FetchArgs {
            const localVarPath = `/users/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesUsersUserEnvelope> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersLoginPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConduitFeaturesUsersUserEnvelope> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).usersPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost(options?: any) {
            return UsersApiFp(configuration).usersLoginPost(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(options?: any) {
            return UsersApiFp(configuration).usersPost(options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginPost(options?: any) {
        return UsersApiFp(this.configuration).usersLoginPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPost(options?: any) {
        return UsersApiFp(this.configuration).usersPost(options)(this.fetch, this.basePath);
    }

}
